import pandas as pd
import numpy as np
import streamlit as st
from io import BytesIO

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ Wildberries")

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
mode = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", ["–û–¥–∏–Ω —Ñ–∞–π–ª", "–î–≤–∞ —Ñ–∞–π–ª–∞ (–†–æ—Å—Å–∏—è + –°–ù–ì)"], horizontal=True
)

if mode == "–û–¥–∏–Ω —Ñ–∞–π–ª":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞ Wildberries", type=["xlsx", "xls"]
    )

    if uploaded_file is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            df = pd.read_excel(uploaded_file, dtype={"–ë–∞—Ä–∫–æ–¥": str, "–†–∞–∑–º–µ—Ä": str})

            # –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• =================================
            # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            sums1_per_category = (
                df.groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
                .agg(
                    {
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": "sum",
                        "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)": "sum",
                        "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä": "sum",
                        "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é": "sum",
                    }
                )
                .astype(int)
                .reset_index()
            )

            sums1_per_category["–ö –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"] = (
                sums1_per_category["–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"]
                - sums1_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
            ).astype(int)
            sums1_per_category["–°—É–º–º–∞ –°–ü–ü"] = (
                sums1_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                - sums1_per_category["–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)"]
            ).astype(int)
            sums1_per_category["% –õ–æ–≥/—Ä—Å"] = (
                (
                    (
                        sums1_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / sums1_per_category[
                            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"
                        ]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )
            sums1_per_category["% –õ–æ–≥/–ù–∞—à–∞ –¶–µ–Ω–∞"] = (
                (
                    (
                        sums1_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / sums1_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç—ã
            returns_by_article = (
                df[df["–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"] == "–í–æ–∑–≤—Ä–∞—Ç"]
                .groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")[
                    [
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è",
                        "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)",
                        "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä",
                    ]
                ]
                .sum()
                .fillna(0)
                .reset_index()
            )
            returns_by_article = returns_by_article.rename(
                columns={
                    "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": "–í–æ–∑–≤—Ä–∞—Ç—ã –ù–∞—à–∞ —Ü–µ–Ω–∞",
                    "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)": "–í–æ–∑–≤—Ä–∞—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë",
                    "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä": "–í–æ–∑–≤—Ä—Ç—ã –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é",
                }
            )

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            first_merged = sums1_per_category.merge(
                returns_by_article, on="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", how="left"
            ).fillna(0)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏
            first_merged["–ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ù–∞—à–∏"] = (
                first_merged["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"] - first_merged["–í–æ–∑–≤—Ä–∞—Ç—ã –ù–∞—à–∞ —Ü–µ–Ω–∞"]
            )
            first_merged["–ß–∏—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—á –í–ë"] = (
                first_merged["–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)"]
                - first_merged["–í–æ–∑–≤—Ä–∞—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë"]
            )
            first_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ"] = (
                first_merged["–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"]
                - first_merged["–í–æ–∑–≤—Ä—Ç—ã –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é"]
            )
            first_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"] = (
                first_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ"]
                - first_merged["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
            )

            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            cost_per_category = (
                df.groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
                .agg(
                    {
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": lambda x: (
                            x[x != 0].mean() if any(x != 0) else 0
                        ),
                        "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)": lambda x: (
                            x[x != 0].mean() if any(x != 0) else 0
                        ),
                        "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä": lambda x: (
                            x[x != 0].mean() if any(x != 0) else 0
                        ),
                        "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é": lambda x: x.mean() * 2,
                    }
                )
                .astype(int)
                .reset_index()
            )

            cost_per_category["–°–ü–ü –°—Ä–µ–¥–Ω—è—è"] = (
                cost_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                - cost_per_category["–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)"]
            ).round(1)
            cost_per_category["–ö –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏ –°—Ä–µ–¥–Ω—è—è"] = (
                cost_per_category["–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"]
                - cost_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
            ).round(1)
            cost_per_category["% –õ–æ–≥/–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å –õ–æ–≥ –°—Ä–µ–¥–Ω–∏–π"] = (
                (
                    (
                        cost_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / cost_per_category[
                            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"
                        ]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )
            cost_per_category["% –õ–æ–≥/–ù–∞—à–∞ —Ü–µ–Ω–∞ –°—Ä–µ–¥–Ω–∏–π"] = (
                (
                    (
                        cost_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / cost_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            second_merged = first_merged.merge(
                cost_per_category, on="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", how="left"
            ).fillna(0)
            second_merged = second_merged.rename(
                columns={
                    "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è_y": "–ù–∞—à–∞ —Ü–µ–Ω–∞ –°—Ä–µ–¥–Ω—è—è",
                    "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)_y": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë –°—Ä–µ–¥–Ω—è—è",
                    "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä_y": "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –°—Ä–µ–¥–Ω–µ–µ",
                    "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é_y": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –û–¥–Ω–æ–π –Æ–±–∫–∏ –°—Ä–µ–¥–Ω—è—è",
                }
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
            df_exploded = df.explode("–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç")
            df_exploded["–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç"] = df_exploded[
                "–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç"
            ].fillna("–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            status_log = (
                df_exploded.groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")[
                    "–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç"
                ]
                .value_counts()
                .unstack(fill_value=0)
                .reset_index()
            )

            for col in [
                "–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ",
                "–û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ",
                "–û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ",
            ]:
                status_log[col] = status_log.get(col, pd.Series(0)).fillna(0)

            numerator = status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"]
            denominator = (
                status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ"]
                + status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"]
                + status_log["–û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ"]
            )

            status_log["%–í—ã–∫—É–ø–∞"] = np.where(
                (numerator == 0) & (denominator == 0),
                0,
                np.where(
                    numerator == 0 & (denominator > 0),
                    -100,
                    np.where(
                        denominator == 0, 0, (numerator / denominator) * 100
                    ).astype(int),
                ),
            )
            status_log["–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)"] = (
                status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"] * 600
            ).round(0)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            third_merged = second_merged.merge(
                status_log[
                    [
                        "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                        "–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ",
                        "%–í—ã–∫—É–ø–∞",
                        "–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)",
                    ]
                ],
                on="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                how="left",
            ).fillna(0)

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            third_merged = third_merged.rename(
                columns={
                    "–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ": "–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂",
                    "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è_x": "–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ù–∞—à–∞ –¶–µ–Ω–∞",
                    "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)_x": "–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ø–æ —Ü–µ–Ω–µ –í–ë",
                    "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä_x": "–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏ –° –õ–æ–≥",
                    "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é_x": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                }
            )

            # –†–∞—Å—á–µ—Ç—ã
            third_merged["–ú–∞—Ä–∂–∞"] = (
                third_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"]
                - third_merged["–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)"]
            ).round(1)
            third_merged["–ù–∞–ª–æ–≥–∏"] = (
                third_merged["–ß–∏—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—á –í–ë"] * 0.07
            ).round(1)
            third_merged["–ü—Ä–∏–±—ã–ª—å"] = (
                third_merged["–ú–∞—Ä–∂–∞"] - third_merged["–ù–∞–ª–æ–≥–∏"]
            ).round(1)
            third_merged.sort_values(
                by="–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ù–∞—à–∞ –¶–µ–Ω–∞", ascending=False, inplace=True
            )
            third_merged["–ü—Ä–∏–±—ã–ª—å –Ω–∞ 1 –Æ–±–∫—É"] = (
                third_merged["–ú–∞—Ä–∂–∞"] / third_merged["–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂"]
            ).round(1)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            all_add_log = (
                df.groupby("–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
                .agg(
                    {
                        "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é": "sum",
                        "–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤": "sum",
                        "–•—Ä–∞–Ω–µ–Ω–∏–µ": "sum",
                        "–£–¥–µ—Ä–∂–∞–Ω–∏—è": "sum",
                        "–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞": "sum",
                    }
                )
                .reset_index()
            )

            totall_summary = pd.DataFrame(
                {
                    "–ö–æ–ª–æ–Ω–∫–∞": [
                        "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                        "–°—É–º–º–∞ –°–ü–ü",
                        "–°—É–º–º–∞ –ß–∏—Å—Ç—ã—Ö –ø—Ä–æ–¥–∞–∂ –±–µ–∑ –í–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏ –õ–æ–≥–∏—Å—Ç–∏–∫–∏",
                        "–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂, –®—Ç",
                        "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂",
                        "–ü—Ä–∏–±—ã–ª—å –±–µ–∑ –Ω–∞–ª–æ–≥–∞",
                        "–®—Ç—Ä–∞—Ñ—ã",
                        "–•—Ä–∞–Ω–µ–Ω–∏–µ",
                        "–£–¥–µ—Ä–∂–∞–Ω–∏—è",
                        "–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞",
                        "–ò—Ç–æ–≥–æ: –ø—Ä–∏–±—ã–ª—å –º–∏–Ω—É—Å –¥–æ–ø. —É–¥–µ—Ä–∂–∞–Ω–∏—è",
                    ],
                    "–û–±—â–∞—è —Å—É–º–º–∞": [
                        third_merged["–õ–æ–≥–∏—Å—Ç–∏–∫–∞"].sum(),
                        third_merged["–°—É–º–º–∞ –°–ü–ü"].sum(),
                        third_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"].sum(),
                        third_merged["–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂"].sum(),
                        third_merged["–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)"].sum(),
                        third_merged["–ü—Ä–∏–±—ã–ª—å"].sum(),
                        all_add_log["–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤"].sum(),
                        all_add_log["–•—Ä–∞–Ω–µ–Ω–∏–µ"].sum(),
                        all_add_log["–£–¥–µ—Ä–∂–∞–Ω–∏—è"].sum(),
                        all_add_log["–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞"].sum(),
                        third_merged["–ü—Ä–∏–±—ã–ª—å"].sum()
                        - (
                            all_add_log["–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤"].sum()
                            + all_add_log["–•—Ä–∞–Ω–µ–Ω–∏–µ"].sum()
                            + all_add_log["–£–¥–µ—Ä–∂–∞–Ω–∏—è"].sum()
                            + all_add_log["–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞"].sum()
                        ),
                    ],
                }
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–æ—Ñ—Ç" —Ç–æ–≤–∞—Ä–æ–≤
            summary_soft = (
                df[df["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"].str.contains("–°–æ—Ñ—Ç", case=False, na=False)]
                .groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", as_index=False)
                .agg(
                    {
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": [
                            ("–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞—à–∞ —Ü–µ–Ω–∞ (–°–æ—Ñ—Ç)", "sum"),
                            ("–°—Ä–µ–¥–Ω—è—è –ù–∞—à–∞ —Ü–µ–Ω–∞ (–°–æ—Ñ—Ç)", lambda x: x[x != 0].mean()),
                        ]
                    }
                )
                .round(0)
                .astype(int, errors="ignore")
            )
            summary_soft.columns = [
                "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (–°–æ—Ñ—Ç)",
                "–¶–µ–Ω–∞ —Å—Ä–µ–¥–Ω—è—è (–°–æ—Ñ—Ç)",
            ]
            summary_soft.sort_values(
                by="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (–°–æ—Ñ—Ç)", ascending=False, inplace=True
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
            output = BytesIO()
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                third_merged.to_excel(
                    writer, sheet_name="Summary_Table_by_Art", index=False
                )
                totall_summary.to_excel(
                    writer, sheet_name="Totall_Summary", index=False
                )
                summary_soft.to_excel(writer, sheet_name="Soft_Summary", index=False)
            output.seek(0)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
                data=output,
                file_name="wildberries_report.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            st.stop()
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞")

else:
    # –†–µ–∂–∏–º "–î–≤–∞ —Ñ–∞–π–ª–∞"
    col1, col2 = st.columns(2)
    with col1:
        uploaded_file_russia = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ –†–æ—Å—Å–∏–∏", type=["xlsx", "xls"]
        )
    with col2:
        uploaded_file_cis = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ –°–ù–ì", type=["xlsx", "xls"]
        )

    if uploaded_file_russia is not None and uploaded_file_cis is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            df_Russia = pd.read_excel(
                uploaded_file_russia, dtype={"–ë–∞—Ä–∫–æ–¥": str, "–†–∞–∑–º–µ—Ä": str}
            )
            df_CIS = pd.read_excel(
                uploaded_file_cis, dtype={"–ë–∞—Ä–∫–æ–¥": str, "–†–∞–∑–º–µ—Ä": str}
            )
            df = pd.concat([df_Russia, df_CIS], ignore_index=True)

            # ============== –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• =================================
            # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            sums1_per_category = (
                df.groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
                .agg(
                    {
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": "sum",
                        "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)": "sum",
                        "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä": "sum",
                        "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é": "sum",
                    }
                )
                .astype(int)
                .reset_index()
            )

            sums1_per_category["–ö –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"] = (
                sums1_per_category["–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"]
                - sums1_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
            ).astype(int)
            sums1_per_category["–°—É–º–º–∞ –°–ü–ü"] = (
                sums1_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                - sums1_per_category["–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)"]
            ).astype(int)
            sums1_per_category["% –õ–æ–≥/—Ä—Å"] = (
                (
                    (
                        sums1_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / sums1_per_category[
                            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"
                        ]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )
            sums1_per_category["% –õ–æ–≥/–ù–∞—à–∞ –¶–µ–Ω–∞"] = (
                (
                    (
                        sums1_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / sums1_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç—ã
            returns_by_article = (
                df[df["–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"] == "–í–æ–∑–≤—Ä–∞—Ç"]
                .groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")[
                    [
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è",
                        "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)",
                        "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä",
                    ]
                ]
                .sum()
                .fillna(0)
                .reset_index()
            )
            returns_by_article = returns_by_article.rename(
                columns={
                    "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": "–í–æ–∑–≤—Ä–∞—Ç—ã –ù–∞—à–∞ —Ü–µ–Ω–∞",
                    "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)": "–í–æ–∑–≤—Ä–∞—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë",
                    "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä": "–í–æ–∑–≤—Ä—Ç—ã –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é",
                }
            )

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            first_merged = sums1_per_category.merge(
                returns_by_article, on="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", how="left"
            ).fillna(0)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏
            first_merged["–ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ù–∞—à–∏"] = (
                first_merged["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"] - first_merged["–í–æ–∑–≤—Ä–∞—Ç—ã –ù–∞—à–∞ —Ü–µ–Ω–∞"]
            )
            first_merged["–ß–∏—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—á –í–ë"] = (
                first_merged["–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)"]
                - first_merged["–í–æ–∑–≤—Ä–∞—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë"]
            )
            first_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ"] = (
                first_merged["–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"]
                - first_merged["–í–æ–∑–≤—Ä—Ç—ã –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é"]
            )
            first_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"] = (
                first_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ"]
                - first_merged["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
            )

            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            cost_per_category = (
                df.groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
                .agg(
                    {
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": lambda x: (
                            x[x != 0].mean() if any(x != 0) else 0
                        ),
                        "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)": lambda x: (
                            x[x != 0].mean() if any(x != 0) else 0
                        ),
                        "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä": lambda x: (
                            x[x != 0].mean() if any(x != 0) else 0
                        ),
                        "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é": lambda x: x.mean() * 2,
                    }
                )
                .astype(int)
                .reset_index()
            )

            cost_per_category["–°–ü–ü –°—Ä–µ–¥–Ω—è—è"] = (
                cost_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                - cost_per_category["–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)"]
            ).round(1)
            cost_per_category["–ö –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏ –°—Ä–µ–¥–Ω—è—è"] = (
                cost_per_category["–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"]
                - cost_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
            ).round(1)
            cost_per_category["% –õ–æ–≥/–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å –õ–æ–≥ –°—Ä–µ–¥–Ω–∏–π"] = (
                (
                    (
                        cost_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / cost_per_category[
                            "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä"
                        ]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )
            cost_per_category["% –õ–æ–≥/–ù–∞—à–∞ —Ü–µ–Ω–∞ –°—Ä–µ–¥–Ω–∏–π"] = (
                (
                    (
                        cost_per_category["–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
                        / cost_per_category["–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è"]
                    )
                    * 100
                )
                .replace(np.inf, 100.0)
                .round(1)
            )

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            second_merged = first_merged.merge(
                cost_per_category, on="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", how="left"
            ).fillna(0)
            second_merged = second_merged.rename(
                columns={
                    "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è_y": "–ù–∞—à–∞ —Ü–µ–Ω–∞ –°—Ä–µ–¥–Ω—è—è",
                    "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)_y": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë –°—Ä–µ–¥–Ω—è—è",
                    "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä_y": "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –°—Ä–µ–¥–Ω–µ–µ",
                    "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é_y": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –û–¥–Ω–æ–π –Æ–±–∫–∏ –°—Ä–µ–¥–Ω—è—è",
                }
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏
            df_exploded = df.explode("–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç")
            df_exploded["–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç"] = df_exploded[
                "–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç"
            ].fillna("–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            status_log = (
                df_exploded.groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")[
                    "–í–∏–¥—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –¥–æ–ø–ª–∞—Ç"
                ]
                .value_counts()
                .unstack(fill_value=0)
                .reset_index()
            )

            for col in [
                "–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ",
                "–û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ",
                "–û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ",
            ]:
                status_log[col] = status_log.get(col, pd.Series(0)).fillna(0)

            numerator = status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"]
            denominator = (
                status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ"]
                + status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"]
                + status_log["–û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ"]
            )

            status_log["%–í—ã–∫—É–ø–∞"] = np.where(
                (numerator == 0) & (denominator == 0),
                0,
                np.where(
                    numerator == 0 & (denominator > 0),
                    -100,
                    np.where(
                        denominator == 0, 0, (numerator / denominator) * 100
                    ).astype(int),
                ),
            )
            status_log["–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)"] = (
                status_log["–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ"] * 600
            ).round(0)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            third_merged = second_merged.merge(
                status_log[
                    [
                        "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                        "–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ",
                        "%–í—ã–∫—É–ø–∞",
                        "–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)",
                    ]
                ],
                on="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                how="left",
            ).fillna(0)

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            third_merged = third_merged.rename(
                columns={
                    "–ö –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ": "–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂",
                    "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è_x": "–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ù–∞—à–∞ –¶–µ–Ω–∞",
                    "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¢–æ–≤–∞—Ä (–ü—Ä)_x": "–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ø–æ —Ü–µ–Ω–µ –í–ë",
                    "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –ü—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¢–æ–≤–∞—Ä_x": "–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏ –° –õ–æ–≥",
                    "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é_x": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                }
            )

            # –†–∞—Å—á–µ—Ç—ã
            third_merged["–ú–∞—Ä–∂–∞"] = (
                third_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"]
                - third_merged["–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)"]
            ).round(1)
            third_merged["–ù–∞–ª–æ–≥–∏"] = (
                third_merged["–ß–∏—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—á –í–ë"] * 0.07
            ).round(1)
            third_merged["–ü—Ä–∏–±—ã–ª—å"] = (
                third_merged["–ú–∞—Ä–∂–∞"] - third_merged["–ù–∞–ª–æ–≥–∏"]
            ).round(1)
            third_merged.sort_values(
                by="–°—É–º–º–∞ –ü—Ä–æ–¥–∞–∂ –ù–∞—à–∞ –¶–µ–Ω–∞", ascending=False, inplace=True
            )
            third_merged["–ü—Ä–∏–±—ã–ª—å –Ω–∞ 1 –Æ–±–∫—É"] = (
                third_merged["–ú–∞—Ä–∂–∞"] / third_merged["–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂"]
            ).round(1)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            all_add_log = (
                df.groupby("–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
                .agg(
                    {
                        "–£—Å–ª—É–≥–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é": "sum",
                        "–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤": "sum",
                        "–•—Ä–∞–Ω–µ–Ω–∏–µ": "sum",
                        "–£–¥–µ—Ä–∂–∞–Ω–∏—è": "sum",
                        "–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞": "sum",
                    }
                )
                .reset_index()
            )

            totall_summary = pd.DataFrame(
                {
                    "–ö–æ–ª–æ–Ω–∫–∞": [
                        "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                        "–°—É–º–º–∞ –°–ü–ü",
                        "–°—É–º–º–∞ –ß–∏—Å—Ç—ã—Ö –ø—Ä–æ–¥–∞–∂ –±–µ–∑ –í–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏ –õ–æ–≥–∏—Å—Ç–∏–∫–∏",
                        "–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂, –®—Ç",
                        "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂",
                        "–ü—Ä–∏–±—ã–ª—å –±–µ–∑ –Ω–∞–ª–æ–≥–∞",
                        "–®—Ç—Ä–∞—Ñ—ã",
                        "–•—Ä–∞–Ω–µ–Ω–∏–µ",
                        "–£–¥–µ—Ä–∂–∞–Ω–∏—è",
                        "–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞",
                        "–ò—Ç–æ–≥–æ: –ø—Ä–∏–±—ã–ª—å –º–∏–Ω—É—Å –¥–æ–ø. —É–¥–µ—Ä–∂–∞–Ω–∏—è",
                    ],
                    "–û–±—â–∞—è —Å—É–º–º–∞": [
                        third_merged["–õ–æ–≥–∏—Å—Ç–∏–∫–∞"].sum(),
                        third_merged["–°—É–º–º–∞ –°–ü–ü"].sum(),
                        third_merged["–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏"].sum(),
                        third_merged["–ö–æ–ª-–≤–æ –ü—Ä–æ–¥–∞–∂"].sum(),
                        third_merged["–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)"].sum(),
                        third_merged["–ü—Ä–∏–±—ã–ª—å"].sum(),
                        all_add_log["–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤"].sum(),
                        all_add_log["–•—Ä–∞–Ω–µ–Ω–∏–µ"].sum(),
                        all_add_log["–£–¥–µ—Ä–∂–∞–Ω–∏—è"].sum(),
                        all_add_log["–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞"].sum(),
                        third_merged["–ü—Ä–∏–±—ã–ª—å"].sum()
                        - (
                            all_add_log["–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤"].sum()
                            + all_add_log["–•—Ä–∞–Ω–µ–Ω–∏–µ"].sum()
                            + all_add_log["–£–¥–µ—Ä–∂–∞–Ω–∏—è"].sum()
                            + all_add_log["–ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞"].sum()
                        ),
                    ],
                }
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–æ—Ñ—Ç" —Ç–æ–≤–∞—Ä–æ–≤
            summary_soft = (
                df[df["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"].str.contains("–°–æ—Ñ—Ç", case=False, na=False)]
                .groupby("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", as_index=False)
                .agg(
                    {
                        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": [
                            ("–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞—à–∞ —Ü–µ–Ω–∞ (–°–æ—Ñ—Ç)", "sum"),
                            ("–°—Ä–µ–¥–Ω—è—è –ù–∞—à–∞ —Ü–µ–Ω–∞ (–°–æ—Ñ—Ç)", lambda x: x[x != 0].mean()),
                        ]
                    }
                )
                .round(0)
                .astype(int, errors="ignore")
            )
            summary_soft.columns = [
                "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (–°–æ—Ñ—Ç)",
                "–¶–µ–Ω–∞ —Å—Ä–µ–¥–Ω—è—è (–°–æ—Ñ—Ç)",
            ]
            summary_soft.sort_values(
                by="–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ (–°–æ—Ñ—Ç)", ascending=False, inplace=True
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
            output = BytesIO()
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                third_merged.to_excel(
                    writer, sheet_name="Summary_Table_by_Art", index=False
                )
                totall_summary.to_excel(
                    writer, sheet_name="Totall_Summary", index=False
                )
                summary_soft.to_excel(writer, sheet_name="Soft_Summary", index=False)
            output.seek(0)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
                data=output,
                file_name="wildberries_report_combined.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            st.stop()
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞")
